
shader Air_Emission_EmitFromPoint: ComputeShaderBase, Air_ParticleStruct, H_GaussRndArrays
{
    #define GAUSSRND_COUNT 1024

    struct PointEmitter
    {
        float3 Pos;
        float PosRndAmount;
        float SpreadPosAlongLastVel;
        float3 Vel;
        float VelRndAmount;
        float VelInfluence;
        float3 ShootVel;
        float3 InitialForce;
        float Mass;
        float MassRndAmount;
        float Heat;
        float4 Color;
        float3 ColRndAmount;
        float O2;
        float O2RndAmount;
        float InitialLifeTime;

        uint EmittedParticlesCount;

        float2 pad;
    };
    StructuredBuffer<PointEmitter> PointEmittersBuffer;

    AppendStructuredBuffer<AirParticle> EmittedParticlesAppendBuffer;
    /*
        float4 PosLifeT;
        float4 VelHeat;
        float4 ForceMass;
        float4 ColSize;
    */

    uint RndOffset;


    // =============================================================================
    // CS ==========================================================================
    // =============================================================================

    override void Compute()
    {
        uint id = streams.DispatchThreadId.x;

        PointEmitter In = PointEmittersBuffer[id];

        if(In.EmittedParticlesCount > 0)
        {
            AirParticle Out = (AirParticle)0;
            /*
                float4 PosLifeT;
                float4 VelHeat;
                //float4 ForceMass;
                float4 ColO2;
            */
        
            // Pos
            float3 Pos = In.Pos;

            // Vel
            float3 EmitterVel = In.Vel;	
            EmitterVel = (EmitterVel * In.VelInfluence) + In.ShootVel;

            // Initial Force
            //Out.ForceMass.xyz = In.InitialForce;

            // Heat
            Out.VelHeat.w = In.Heat;

            // Initial LifeT
            Out.PosLifeT.w = In.InitialLifeTime;
        
            for (uint i=0; i < In.EmittedParticlesCount; i++)
            {
                uint RndIndex = (id + i + RndOffset) % GAUSSRND_COUNT;
                float4 GaussAndRnd = GaussDirAndRndWArray[RndIndex];
               // float4 Rnd = RndBuffer[RndIndex];
               // Rnd -= 0.5;
                        
                // POS
                // Spread Along Prev Vel
                float3 SpreadAlongVel = (EmitterVel / (float)In.EmittedParticlesCount * (float)i) * In.SpreadPosAlongLastVel;	// shift the emission pos along prev vel vector
                // Randomness:
                float3 GaussOffset = GaussAndRnd.xyz * In.PosRndAmount;
                Out.PosLifeT.xyz = Pos + SpreadAlongVel + GaussOffset;
            
                // VEL
                float3 ValRndOffset = GaussAndRnd.zxy * In.VelRndAmount;
                ValRndOffset.x *= -1;
                Out.VelHeat.xyz = EmitterVel + ValRndOffset;

                // MASS
                //Out.ForceMass.w = In.Mass + Rnd.x * In.MassRndAmount;
                
            
                // COL
                Out.ColO2.xyz = In.Color.xyz + GaussAndRnd.zxy * In.ColRndAmount;
            
                // O2
                Out.ColO2.w = In.O2 + GaussAndRnd.w * In.O2RndAmount;

                EmittedParticlesAppendBuffer.Append(Out);
            }
        }
    }
};