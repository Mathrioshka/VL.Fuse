
shader Air_Emission_EmitFromPointcloud : ComputeShaderBase, Air_ParticleStruct, Common_Utils, H_iqNoise
{
    #define RND_COUNT 1024

    cbuffer PerFrame
    {
        float2 TexDimensions;
        float2 FogRange;
        float DistEmissionGamma = 2;
        int MaxEmittedParticlesCount;
        float EmittedParticleHeat;
        float EmittedParticleO2;

        // Perlin Oscillation 
        stage float PerlinOscillation_Freq;
    };
    cbuffer PerFrame
    {
        // Dynamic Settings
        stage float4 PerlinOscillation_PosOffsetAndTime; // float4( float3 Position Offset, float Time)
        stage float4 PerlinOscillation_Strength; // float4( float3 XYZ Strength, float pad)
    }
    cbuffer Random
    {
        float RandomValues[RND_COUNT];
    }
    cbuffer Indices
    {
        int RandomIndices[RND_COUNT];
    }

    Texture2D Pointcloud_EmissiveTexture;
    AppendStructuredBuffer<AirParticle> EmittedParticlesAppendBuffer;

    override void Compute()
    {
        if(streams.DispatchThreadId.x >= MaxEmittedParticlesCount) return;
        uint id = streams.DispatchThreadId.x;

        uint RndIndex = RandomIndices[id % RND_COUNT];
        uint2 TexSize = TexDimensions;
        uint2 uv = uint2(RndIndex % TexSize.x, (RndIndex / TexSize.x) % TexSize.y);

        float4 TexData = Pointcloud_EmissiveTexture[uv];

        float3 Pos = TexData.xyz;
        Pos.z *= -1;
        float Anim = TexData.w;
        Anim = 1 - (Anim / 255.0);

        float3 CamVec = Pos - Eye.xyz;
        float CamDist = length(CamVec);

        if(CamDist < FogRange.y)
        {
            float DistFactor = smoothstep(FogRange.y, FogRange.x, CamDist);
            //DistFactor = pow(DistFactor, DistEmissionGamma);

            if (RandomValues[RndIndex % RND_COUNT] < DistFactor)
            {
                // PERLIN OSCILLATION --------------------------------------------------
                float3 PerlinForce = 0;
                float3 Offset = PerlinOscillation_PosOffsetAndTime.w + PerlinOscillation_PosOffsetAndTime.xyz;
                PerlinForce.x = iqFbm3d_foliage(Pos * PerlinOscillation_Freq, Offset);
                PerlinForce.y = iqFbm3d_foliage(Pos * PerlinOscillation_Freq * float3(0.09,1.02,1.005), Offset + float3(17.34,28.96,300.7));
                PerlinForce.z = iqFbm3d_foliage(Pos * PerlinOscillation_Freq * float3(.097,.09,0.098), Offset + float3(97.34,23.36,2));
                Pos += PerlinForce * PerlinOscillation_Strength * Anim;

                float3 Col = 1;//BitsToColor(TexData.w);
                AirParticle Out;

                Out.PosLifeT = float4(Pos, 0);
                Out.VelHeat = float4(0,0,0, EmittedParticleHeat);
                //Out.ForceMass = float4(0,0,0, 1);
                Out.ColO2 = float4(Col, EmittedParticleO2);

                EmittedParticlesAppendBuffer.Append(Out);
            }
        }
    }
};