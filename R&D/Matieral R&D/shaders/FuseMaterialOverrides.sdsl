shader FuseMaterialOverrides :  ShaderBaseStream, Camera, MaterialVertexStream, MaterialPixelStream, Texturing, Transformation
{


	// streams.PositionWS
	// streams.normalWS 
	// streams.TexCoord
	// streams.matNormal = streams.normalWS ;
	// streams.matDiffuse = col;
	// streams.matColorBase = col;
	// streams.matGlossiness = su;


	// should just be void, as all we need is to read and write from the streams
	float bumpMap(float nastyPassthroughValue, float bump, float3 grad, float bumpAmt)
	{
		float3 p = streams.PositionWS;
		float3 n = streams.normalWS;
		p += bump * n * bumpAmt; 
		n += grad * bumpAmt;
		n = normalize(n);
		streams.PositionWS = float4(p, 1);
		streams.normalWS = n;
		return nastyPassthroughValue;
	}


	float3x3 lookat(float3 dir,float3 up=float3(0,1,0)){float3 z=normalize(dir);float3 x=normalize(cross(up,z));float3 y=normalize(cross(z,x));return float3x3(x,y,z);} 

	float3 displaceNorm(inout float3 pos, float3 n, float amount = 1.0, float eps = 0.01)
	{

		float3x3 lkt=lookat(n);

		float3 up=float3(0,1,0);
		float3 z=normalize(n);float3 x=normalize(cross(up,z)); float3 y = normalize(cross(z,x));
		float3x3 lkt = float3x3(x,y,z);

		float3 v1=float3(1,0,0);
		float3 v2=float3(0,0,1);
		v1=normalize(mul(v1,(lkt)));
		v2=normalize(cross(n,v1));

		float3 p0 = pos;
		float3 p1 = p0 + v1 * eps;
		float3 p2 = p0 + v2 * eps;

	//	p0 += VF3D(p0) * amount;
	//	p1 += VF3D(p1) * amount;
	//	p2 += VF3D(p2) * amount;

		v1=normalize(p1-p0);
		v2=normalize(p2-p0);

		pos.xyz=p0;							// pass out the displaced position
		return normalize(cross(v1,v2));  	// normals perturbed by the function
	}


};