shader FuseRayMarch: ShaderBaseStream, Transformation, Texturing, PositionStream4, NormalStream, FuseCommonTypes
{

	// the signed distance field to raymarch
	abstract float SDF(float3 p);		

	// setup ray origin and direction
	abstract Ray setupRay();		
	
	// min max distances and early discard
	abstract float2 cullRay(Ray ray);	
	void killRay()
	{
		discard;
	}
	
	// ray march loop
	abstract void marchRay(inout Ray ray, float2 minMaxDist, int maxIter = 180);

	// what kind of color / material treatment? multi & adaptive sampling can also go here
	abstract float4 shadeRay(Ray ray); 


	// just generate normals with central difference
	float3 SDFNormal(float3 p, float e = 0.01)
	{
		float3 gradient = float3 (	(SDF(p + float3(e,0,0)) - SDF(p - float3(e,0,0))) / (2*e), 
									(SDF(p + float3(0,e,0)) - SDF(p - float3(0,e,0))) / (2*e), 
									(SDF(p + float3(0,0,e)) - SDF(p - float3(0,0,e))) / (2*e)	);
		return normalize(gradient+0.0000001);

	}


	Ray setupRaybyCamera()
	{	
		float2 uv = streams.TexCoord;
		float3 rd = normalize(mul(float4(mul(float4((uv.xy*2-1)*float2(1,-1),0,1),ProjectionInverse).xy,-1,0),ViewInverse).xyz);
		float3 ro = ViewInverse[3].xyz;
		return makeRay(ro, rd);
	}
	
	float2 r2d(float2 x,float a){a*=acos(-1)*2;return float2(cos(a)*x.x+sin(a)*x.y,cos(a)*x.y-sin(a)*x.x);}
	// equirectangular panorama version
	Ray setupRayPano() 	
	{	
		float2 uv = streams.TexCoord;
		float3 ro = ViewInverse[3].xyz;
		float3 rd = float3(0, 0, 1);
		rd.yz = r2d(rd.yz,-(uv.y-.5)*.5);
		rd.xz = r2d(rd.xz,-uv.x);
		return makeRay(ro, rd);
	}

	float2 cullRayDefualt(Ray ray, float2 minMaxDist =  float2(0.1, 200.))
	{
		return minMaxDist;
	}


	// https://iquilezles.org/www/articles/boxfunctions/boxfunctions.htm
	float2 cullRayByBox(Ray ray, float3 pos = 0., float3 radius = 2.)  // bounding box
	{
		float3 m = 1.0 / ray.rd;
		float3 n = m * ray.ro;
		float3 k = abs(m) * radius;
		float3 t1 = -n - k;
		float3 t2 = -n + k;

		float tN = max( max( t1.x, t1.y ), t1.z );
		float tF = min( min( t2.x, t2.y ), t2.z );
	
		if( tN > tF || tF < 0.0) killRay(); // no intersection
		tN = max(tN, 0); // avoid starting our ray behind us
		//return float2( 0.01, 200 );
		return float2(tN, tF);
	}

	void killRayDiscard() {discard;};

	void marchRayDefualt(inout Ray ray, float2 minMaxDist = float2(.05, 100), int maxIter = 180)
	{
		float3 startPos = ray.ro + ray.rd * minMaxDist.x;
		float3 p = startPos;
		float z = minMaxDist.x;
		//minMaxDist.y -= minMaxDist.x;
		for(int i=0; i<maxIter; i++)
		{
			float dist = SDF(p);
			p += ray.rd * dist;	
			z += dist;
			if(abs(dist) < 0.0001 * z || z > minMaxDist.y) break;
		}

		if(z > minMaxDist.y) discard;
		ray.sp = p;
		ray.sn = SDFNormal(ray.sp);
	}



	float3 rayMarch(float3 rayPos, float3 rayDir, float stepLength = .9, float minDist = 0.1, float maxDist = 200.0, int maxIter = 120)
	{
		float3 startPos = rayPos + rayDir * minDist;
		float3 p = startPos;
		float z = minDist;
		maxDist -= minDist;
		for(int i=0; i<maxIter; i++)
		{
			float dist = SDF(p);
			float rayStep = stepLength * dist;
			p += rayDir * rayStep;	
			z += rayStep;
			if(abs(dist) < 0.0001 * z || z > maxDist) break;
		}
		return p;
	}
	////////////////////////////////////////////////////////////////


	
	
	void setupRay(float2 uv, out float3 ro, out float3 rd)
	{	
		// normal projection
			rd = normalize(mul(float4(mul(float4((uv.xy*2-1)*float2(1,-1),0,1),ProjectionInverse).xy,-1,0),ViewInverse).xyz);
			ro = ViewInverse[3].xyz;
	}

	// Raymarch a scene.  Takes uv and returns pos(p), normals(n) & distance(z)
	void rayMarcher(float2 uv, out float3 p, out float3 n, out float3 rd, out float z)
	{
		// Paramerters
		int marchMaxIterations = 120;
		float marchMaxDistance = 200;
		float marchMinDistance = 0.1f;
		float marchStepLength = 0.75f;
		float alpha = 1;

		float3 ro;
		setupRay(uv, ro, rd);

		p = rayMarch(ro, rd, marchStepLength, marchMinDistance, marchMaxDistance, marchMaxIterations);
		float ff=SDF(p);
		if(abs(ff)>.5)discard;
		z = length(p - ro);
		n = SDFNormal(p);
		//if (n != n) discard;
	}



	float4 shadeRayNormals(Ray ray, bool viewFriendly = true)
	{		
		float4 c=1;
		c.rgb = ray.sn;
		if(viewFriendly)c.rgb = c.rgb * 0.5 + 0.5; // remap normals to 0-1
		c.a = 1;

		float3 p = ray.sp;
		float3 n = ray.sn;
		float4 PosWVP = mul(float4(ray.sp, 1), ViewProjection);
		streams.Depth = PosWVP.z/PosWVP.w;
		streams.DepthVS = PosWVP.w;

		/*
		streams.PositionWS = float4(p.xyz, 1);
		float4 PosWVP = mul(streams.PositionWS, ViewProjection);
		streams.normalWS = n;
		streams.meshNormalWS = n;
		streams.DepthVS = PosWVP.w;
		streams.Depth = PosWVP.z/PosWVP.w;
		*/
		return c;
	}


	float4 shadeRayGradient(Ray ray, float4 col = 1.)
	{		
		float4 c=1;
		float g = saturate(dot(ray.rd,-ray.sn));
		c.rgb = g * col.rgb;

		float4 PosWVP = mul(float4(ray.sp, 1), ViewProjection);
		streams.Depth = PosWVP.z/PosWVP.w;


		return c;
	}


	float4 shadeRayMatcap(Ray ray)
	{		
		float4 c=1;
		float3 vn = mul(float4(ray.sn, 0), View).xyz;
		//vn.y = -vn.y;
		//vn.xy = vn.xy * .5 + .5;
		float2 matCapCoords = vn * float2(.5, -.5) + .5;

		// sample matcap tex with matCapCoords
	

		float4 PosWVP = mul(float4(ray.sp, 1), ViewProjection);
		streams.Depth = PosWVP.z/PosWVP.w;
		return c;
	}


};